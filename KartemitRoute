import tkinter as tk
import tkintermapview
import random
import time
import math

class GPSApp:
    def __init__(self, root):
        self.root = root
        self.root.title("GPS Tracker")

        #erstellt Karte, setzt Startposition in Bonn, Zoomfunktion
        self.map_widget = tkintermapview.TkinterMapView(root, width=800, height=600, corner_radius=0)
        self.map_widget.pack(fill="both", expand=True)
        self.map_widget.set_position(50.7374, 7.0982)  # Bonn Koordinaten
        self.map_widget.set_zoom(15)

        # Button für Start und Stop
        self.button_frame = tk.Frame(root)
        self.button_frame.pack()
        self.start_button = tk.Button(self.button_frame, text="Start Route", command=self.start_route)
        self.start_button.pack(side=tk.LEFT, padx=5)
        self.stop_button = tk.Button(self.button_frame, text="Stop Route", command=self.stop_route)
        self.stop_button.pack(side=tk.LEFT, padx=5)

        # Variablen zum Steuern der Simulation (Aufzeichnung, aktuelle Route, ob Marker gesetzt ist, Welcher Simulationsschritt gerade läuft)
        self.tracking = False
        self.route_points = []
        self.last_stationary_point = None
        self.stationary_start_time = None
        self.stationary_marked = False

        # Simulated GPS Timer (Startet Timer der alle 5 Sekunden GPS-Daten generiert)
        self.simulation_step = 0
        self.simulation_timer()

        #Schaltet Tracking an, Leert alte Daten, Löscht alte Pfade auf der Karte
    def start_route(self):
        self.tracking = True
        self.route_points = []
        self.stationary_marked = False
        self.last_stationary_point = None
        self.stationary_start_time = None
        self.simulation_step = 0
        self.map_widget.delete_all_path()  # Vorherige Pfade löschen
        print("Route gestartet")

        #Stoppt das Tracking
    def stop_route(self):
        self.tracking = False
        print("Route gestoppt")

        #Wird alle 5 Sekunden neu ausgeführt, Führt simulate_gps_data() aus wenn Tracking aktiv
    def simulation_timer(self):
        if self.tracking:
            self.simulate_gps_data()
        self.root.after(5000, self.simulation_timer)  # Alle 5 Sekunden simulieren

    def simulate_gps_data(self):
        # Simulierte GPS-Bewegung mit Koordinaten
        if self.simulation_step < 3:
            # Bewegung
            if not self.route_points:
                lat, lon = 50.7374, 7.0982
            else:
                lat, lon = self.route_points[-1]
                lat += random.uniform(-0.0002, 0.0002)
                lon += random.uniform(-0.0002, 0.0002)
            self.route_points.append((lat, lon))

        elif 3 <= self.simulation_step < 6:
            # Aufenthalt
            lat, lon = self.route_points[-1]
            self.route_points.append((lat, lon))

        else:
            # Weiter Bewegung
            lat, lon = self.route_points[-1]
            lat += random.uniform(-0.0002, 0.0002)
            lon += random.uniform(-0.0002, 0.0002)
            self.route_points.append((lat, lon))

        # Route in Echtzeit einzeichnen
        if len(self.route_points) > 1:
            self.map_widget.set_path(self.route_points)

        self.check_stationary(lat, lon)
        print(f"Schritt {self.simulation_step}: Punkt: {lat}, {lon}")
        self.simulation_step += 1

    def check_stationary(self, lat, lon):
        if self.stationary_marked:
            return

        if self.last_stationary_point is None:
            self.last_stationary_point = (lat, lon)
            self.stationary_start_time = time.time()
        else:
            dist = self.haversine_distance(lat, lon, *self.last_stationary_point)
            if dist < 20:  # Weniger als 20 Meter Bewegung
                duration = time.time() - self.stationary_start_time
                if duration >= 60:  # 1 Minute
                    marker = self.map_widget.set_marker(lat, lon, text="Längerer Aufenthalt")
                    marker.canvas_item.config(font=("Arial", 14, "bold"), fill="red")
                    self.stationary_marked = True
                    print("Längerer Aufenthalt erkannt und markiert.")
            else:
                self.last_stationary_point = (lat, lon)
                self.stationary_start_time = time.time()

    @staticmethod
    def haversine_distance(lat1, lon1, lat2, lon2):
        R = 6371000  # Radius der Erde in Metern
        phi1, phi2 = math.radians(lat1), math.radians(lat2)
        dphi = math.radians(lat2 - lat1)
        dlambda = math.radians(lon2 - lon1)
        a = math.sin(dphi/2)**2 + math.cos(phi1)*math.cos(phi2)*math.sin(dlambda/2)**2
        return R * 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))

if __name__ == "__main__":
    root = tk.Tk()
    app = GPSApp(root)
    root.mainloop()
